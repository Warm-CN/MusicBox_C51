C51 COMPILER V9.59.0.0   MUSIC_PLAYER                                                      05/16/2025 21:03:58 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MUSIC_PLAYER
OBJECT MODULE PLACED IN .\Objects\music_player.obj
COMPILER INVOKED BY: E:\keil\C51\BIN\C51.EXE music_player.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\music_player.lst) TABS(2) OBJECT(.\Objects\music_player.obj)

line level    source

   1          #include "music_player.h"
   2          #include "music_data.h"
   3          
   4          //-----------------------------------------------------------------------------
   5          // Module-Private Variables
   6          //-----------------------------------------------------------------------------
   7          static PlayerState G_player_state;
   8          static const unsigned char code * G_current_song_data_ptr;
   9          static unsigned int G_current_song_note_index;
  10          static unsigned int G_current_tempo;
  11          static unsigned char G_current_freq_select;
  12          static unsigned int G_note_duration_tick_counter;
  13          static unsigned int G_time_since_last_note_ms; // Incremented by Music_Player_Tick
  14          static unsigned char G_freq_table_offset = 0;
  15          
  16          // Variable to store total elapsed milliseconds for the current song
  17          static unsigned long G_song_total_elapsed_ms = 0;
  18          
  19          
  20          //-----------------------------------------------------------------------------
  21          // Private Helper Functions
  22          //-----------------------------------------------------------------------------
  23          
  24          // This delay function is currently uncalled as per linker warnings.
  25          // It can be removed if not needed for other purposes.
  26          /*
  27          static void delay_ms_software(unsigned int ms) {
  28              unsigned char i, j;
  29              while (ms--) {
  30                  _nop_();
  31                  i = 2;
  32                  j = 199;
  33                  do {
  34                      while (--j);
  35                  } while (--i);
  36              }
  37          }
  38          */
  39          
  40          /**
  41           * @brief Initializes Timer0 for sound generation.
  42           * Configures Timer0 in Mode 1 (16-bit timer).
  43           * Interrupt is enabled, but the timer is initially stopped.
  44           * Timer0 priority is set to HIGH.
  45           */
  46          static void timer0_init_for_music(void) {
  47   1          TMOD &= 0xF0; // Clear Timer0 bits (T0M1=0, T0M0=0, T0_GATE=0, T0_CT=0)
  48   1          TMOD |= 0x01; // Set Timer0 to Mode 1 (16-bit timer: T0M1=0, T0M0=1)
  49   1      
  50   1          TL0 = 0x18; // Default initial load, ISR will overwrite
  51   1          TH0 = 0xFC;
  52   1      
  53   1          TF0 = 0; // Clear Timer0 overflow flag
  54   1          TR0 = 0; // Stop Timer0 initially
C51 COMPILER V9.59.0.0   MUSIC_PLAYER                                                      05/16/2025 21:03:58 PAGE 2   

  55   1          ET0 = 1; // Enable Timer0 interrupt
  56   1          PT0 = 1; // <<<--- SET TIMER 0 INTERRUPT PRIORITY TO HIGH
  57   1      }
  58          
  59          /**
  60           * @brief Loads and starts playing the next note in the current song.
  61           */
  62          static void play_next_note(void) {
  63   1          unsigned char duration_multiplier;
  64   1          unsigned int timer_reload_val;
  65   1      
  66   1          if (G_player_state != PLAYER_PLAYING || G_current_song_data_ptr == 0) {
  67   2              Music_Stop();
  68   2              return;
  69   2          }
  70   1      
  71   1          G_current_freq_select = G_current_song_data_ptr[G_current_song_note_index];
  72   1          
  73   1          if (G_current_freq_select == SONG_END_MARKER) {
  74   2              Music_Stop();
  75   2              return;
  76   2          }
  77   1      
  78   1          G_current_song_note_index++;
  79   1          duration_multiplier = G_current_song_data_ptr[G_current_song_note_index];
  80   1          G_current_song_note_index++;
  81   1      
  82   1          G_note_duration_tick_counter = (G_current_tempo / 4) * duration_multiplier;
  83   1          G_time_since_last_note_ms = 0;
  84   1      
  85   1          if (G_current_freq_select == NOTE_P) {
  86   2              TR0 = 0;
  87   2              BUZZER_PIN = 0;
  88   2          } else {
  89   2              if (!TR0) {
  90   3                  timer_reload_val = FreqTable[G_current_freq_select + G_freq_table_offset];
  91   3                  TL0 = timer_reload_val % 256;
  92   3                  TH0 = timer_reload_val / 256;
  93   3                  TR0 = 1;
  94   3              }
  95   2          }
  96   1      }
  97          
  98          
  99          //-----------------------------------------------------------------------------
 100          // Public Function Implementations
 101          //-----------------------------------------------------------------------------
 102          
 103          void Music_Init(unsigned int initial_tempo) {
 104   1          timer0_init_for_music();
 105   1          G_current_tempo = initial_tempo > 0 ? initial_tempo : 500;
 106   1          G_player_state = PLAYER_STOPPED;
 107   1          G_current_song_data_ptr = 0;
 108   1          G_current_song_note_index = 0;
 109   1          G_current_freq_select = NOTE_P;
 110   1          G_note_duration_tick_counter = 0;
 111   1          G_time_since_last_note_ms = 0;
 112   1          G_song_total_elapsed_ms = 0; // Initialize elapsed time
 113   1          BUZZER_PIN = 0;
 114   1      }
 115          
 116          void Music_PlaySong(unsigned char song_index) {
C51 COMPILER V9.59.0.0   MUSIC_PLAYER                                                      05/16/2025 21:03:58 PAGE 3   

 117   1          if (song_index >= NUM_SONGS) {
 118   2              return;
 119   2          }
 120   1      
 121   1          Music_Stop(); // This will also reset G_song_total_elapsed_ms
 122   1      
 123   1          G_current_song_data_ptr = Songs[song_index];
 124   1          G_current_song_note_index = 0;
 125   1          G_player_state = PLAYER_PLAYING;
 126   1          // G_song_total_elapsed_ms = 0; // Redundant, Music_Stop() already does this.
 127   1          
 128   1          play_next_note();
 129   1      }
 130          
 131          void Music_Stop(void) {
 132   1          TR0 = 0;
 133   1          BUZZER_PIN = 0;
 134   1          G_player_state = PLAYER_STOPPED;
 135   1          G_current_song_data_ptr = 0;
 136   1          G_current_song_note_index = 0;
 137   1          G_current_freq_select = NOTE_P;
 138   1          G_note_duration_tick_counter = 0;
 139   1          G_time_since_last_note_ms = 0;
 140   1          G_song_total_elapsed_ms = 0; // Reset elapsed time when stopped
 141   1      }
 142          
 143          void Music_Pause(void) {
 144   1          if (G_player_state == PLAYER_PLAYING) {
 145   2              TR0 = 0;
 146   2              G_player_state = PLAYER_PAUSED;
 147   2              // Elapsed time G_song_total_elapsed_ms is NOT reset on pause
 148   2          }
 149   1      }
 150          
 151          void Music_Resume(void) {
 152   1          unsigned int timer_reload_val;
 153   1          if (G_player_state == PLAYER_PAUSED) {
 154   2              G_player_state = PLAYER_PLAYING;
 155   2              if (G_current_freq_select != NOTE_P) {
 156   3                  timer_reload_val = FreqTable[G_current_freq_select + G_freq_table_offset];
 157   3                  TL0 = timer_reload_val % 256;
 158   3                  TH0 = timer_reload_val / 256;
 159   3                  TR0 = 1;
 160   3              }
 161   2          }
 162   1      }
 163          
 164          void Music_SetTempo(unsigned int new_tempo) {
 165   1          if (new_tempo > 0) {
 166   2              G_current_tempo = new_tempo;
 167   2          }
 168   1      }
 169          
 170          PlayerState Music_GetState(void) {
 171   1          return G_player_state;
 172   1      }
 173          
 174          unsigned char Music_GetTotalSongs(void) {
 175   1          return NUM_SONGS;
 176   1      }
 177          
 178          const char code * Music_GetSongName(unsigned char song_index) {
C51 COMPILER V9.59.0.0   MUSIC_PLAYER                                                      05/16/2025 21:03:58 PAGE 4   

 179   1          if (song_index < NUM_SONGS) {
 180   2              return Song_Names[song_index];
 181   2          }
 182   1          return 0;
 183   1      }
 184          
 185          unsigned long Music_GetCurrentSongElapsedTimeMs(void) {
 186   1          return G_song_total_elapsed_ms;
 187   1      }
 188          
 189          void Music_Player_Tick(void) {
 190   1          if (G_player_state == PLAYER_PLAYING) {
 191   2              G_song_total_elapsed_ms++; // Increment total elapsed milliseconds for the song
 192   2              G_time_since_last_note_ms++; // Increment time for the current note/pause
 193   2      
 194   2              if (G_time_since_last_note_ms >= G_note_duration_tick_counter) {
 195   3                  if (G_current_song_data_ptr != 0 && G_current_song_data_ptr[G_current_song_note_index] != SONG
             -_END_MARKER) {
 196   4                       TR0 = 0; 
 197   4                       BUZZER_PIN = 0;
 198   4                  }
 199   3                  play_next_note();
 200   3              }
 201   2          }
 202   1      }
 203          
 204          //-----------------------------------------------------------------------------
 205          // Timer0 Interrupt Service Routine
 206          //-----------------------------------------------------------------------------
 207          void Music_Timer0_ISR(void) interrupt 1 using 1 { // Timer0 Interrupt vector, using register bank 1
 208   1          unsigned int reload_value;
 209   1          if (G_player_state == PLAYER_PLAYING && G_current_freq_select != NOTE_P) {
 210   2              reload_value = FreqTable[G_current_freq_select + G_freq_table_offset];
 211   2              TL0 = reload_value % 256;
 212   2              TH0 = reload_value / 256;
 213   2              BUZZER_PIN = !BUZZER_PIN;
 214   2          } else {
 215   2              BUZZER_PIN = 0;
 216   2          }
 217   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    574    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
