C51 COMPILER V9.59.0.0   MAIN                                                              05/16/2025 21:03:58 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include "music_player.h"
   3          #include "music_data.h"
   4          #include "keypad.h"
   5          #include "LCD1602.h"
   6          // --- LCD related includes and defines would go here ---
   7          //  // Example: sbit LCD_RS = P2^0; ...
   8          
   9          // --- Global variables for application state ---
  10          unsigned char G_selected_song_index = 0; // Start with the first song (index 0)
  11          
  12          // Variables for LCD time update
  13          volatile bit G_update_lcd_time_flag = 0;
  14          static unsigned int s_display_tick_counter = 0;
  15          
  16          // --- Keypad debouncing variables ---
  17          static unsigned char s_key_current_reading = KEY_NONE;
  18          static unsigned char s_key_debounced_state = KEY_NONE;
  19          static unsigned char s_key_last_debounced_state = KEY_NONE;
  20          static unsigned char s_key_debounce_count = 0;
  21          #define KEY_DEBOUNCE_CHECKS 3 // Number of consecutive identical readings for a stable state
  22          
  23          // Simple delay for main loop if needed for debouncing timing
  24          void delay_ms_main(unsigned int ms) {
  25   1          unsigned int i, j;
  26   1          for (i = 0; i < ms; i++) {
  27   2              for (j = 0; j < 120; j++); // Adjust for crystal frequency (e.g., for ~1ms at 11.0592MHz)
  28   2          }
  29   1      }
  30          
  31          //-----------------------------------------------------------------------------
  32          // Timer1 ISR for 1ms Tick (to call Music_Player_Tick)
  33          //-----------------------------------------------------------------------------
  34          #define TIMER1_RELOAD_VAL_1MS 0xFC66 // For 11.0592MHz, for 1ms interrupt
  35          
  36          void Timer1_Init_1ms(void) {
  37   1          TMOD &= 0x0F; // Clear Timer1 bits
  38   1          TMOD |= 0x10; // Set Timer1 to Mode 1 (16-bit timer)
  39   1          TH1 = TIMER1_RELOAD_VAL_1MS / 256; // Load high byte for 1ms
  40   1          TL1 = TIMER1_RELOAD_VAL_1MS % 256; // Load low byte for 1ms
  41   1          TF1 = 0; // Clear Timer1 overflow flag
  42   1          ET1 = 1; // Enable Timer1 interrupt
  43   1          TR1 = 1; // Start Timer1
  44   1      }
  45          
  46          void Timer1_ISR(void) interrupt 3 { // Timer1 Interrupt vector (usually 3 for 8051)
  47   1          TH1 = TIMER1_RELOAD_VAL_1MS / 256; // Reload Timer1 for next 1ms interrupt
  48   1          TL1 = TIMER1_RELOAD_VAL_1MS % 256;
  49   1          Music_Player_Tick(); // Drive the music player rhythm
  50   1      
  51   1          if (Music_GetState() == PLAYER_PLAYING || Music_GetState() == PLAYER_PAUSED) {
  52   2              s_display_tick_counter++;
  53   2              if (s_display_tick_counter >= 1000) { // 1000ms = 1 second
  54   3                  s_display_tick_counter = 0;
C51 COMPILER V9.59.0.0   MAIN                                                              05/16/2025 21:03:58 PAGE 2   

  55   3                  G_update_lcd_time_flag = 1; // Set flag to update LCD in main loop
  56   3              }
  57   2          } else {
  58   2              // If music is stopped, reset the display tick counter
  59   2              s_display_tick_counter = 0;
  60   2              // Optionally, set flag to update display to 00:00 immediately when stopped
  61   2              G_update_lcd_time_flag = 1;
  62   2          }
  63   1      }
  64          
  65          //-----------------------------------------------------------------------------
  66          // Main Function
  67          //-----------------------------------------------------------------------------
  68          void main() {
  69   1          unsigned char processed_key_press = KEY_NONE; // To store the key event
  70   1          PlayerState current_music_state; // To store current music player state
  71   1      
  72   1          // Variables for LCD time display - declared at the start of the block where they are used
  73   1          // These will be used inside the 'if (G_update_lcd_time_flag)' block
  74   1          unsigned long elapsed_ms;
  75   1          unsigned int total_seconds;
  76   1          unsigned char minutes, seconds;
  77   1          char time_str[6]; // Buffer to store the "MM:SS" formatted string
  78   1      
  79   1          // --- System Initializations ---
  80   1          LCD_Init(); // Initialize your LCD if you have one
  81   1          Keypad_Init();      // Initialize keypad I/O
  82   1          Music_Init(500);    // Initialize music player (tempo 500 is an example, was 300)
  83   1          Timer1_Init_1ms();  // Initialize Timer1 for music ticks
  84   1      
  85   1          EA = 1; // Enable Global Interrupts *AFTER* all other initializations
  86   1      
  87   1          // --- Initial Display & Autoplay ---
  88   1          LCD_ShowString(1, 1, "Welcome!"); 
  89   1          LCD_ShowString(2, 1, "Press S13!"); 
  90   1      //    LCD_ShowString(1, 0, "Playing: ");
  91   1      //    LCD_ShowString(1, 9, Music_GetSongName(G_selected_song_index)); // Display initial song name
  92   1      
  93   1      //    Music_PlaySong(G_selected_song_index); // Autoplay the first song on power-on
  94   1      
  95   1          s_key_last_debounced_state = Keypad_GetImmediateKeyState(); // Initialize last keypad state for edge d
             -etection
  96   1      
  97   1          while (1) {
  98   2              // --- Keypad Debouncing and Edge Detection ---
  99   2              s_key_current_reading = Keypad_GetImmediateKeyState();
 100   2      
 101   2              if (s_key_current_reading == s_key_debounced_state) {
 102   3                  s_key_debounce_count = 0; // Reset counter if reading is stable
 103   3              } else {
 104   3                  s_key_debounce_count++;
 105   3                  if (s_key_debounce_count >= KEY_DEBOUNCE_CHECKS) {
 106   4                      s_key_debounce_count = 0;
 107   4                      s_key_debounced_state = s_key_current_reading;
 108   4      
 109   4                      if (s_key_debounced_state != KEY_NONE && s_key_last_debounced_state == KEY_NONE) {
 110   5                          processed_key_press = s_key_debounced_state;
 111   5                      }
 112   4                      s_key_last_debounced_state = s_key_debounced_state;
 113   4                  }
 114   3              }
 115   2      
C51 COMPILER V9.59.0.0   MAIN                                                              05/16/2025 21:03:58 PAGE 3   

 116   2              // --- Process Key Press Event ---
 117   2              if (processed_key_press != KEY_NONE) {
 118   3                  current_music_state = Music_GetState(); // Get current player state before processing key
 119   3                  
 120   3                  switch (processed_key_press) {
 121   4                      case KEY_S13: // Play/Pause (mapped to S13)
 122   4                          if (current_music_state == PLAYER_PLAYING) {
 123   5                              Music_Pause();
 124   5                              LCD_ShowString(2, 1, "Paused     "); 
 125   5                              LCD_ShowString(1, 1, Music_GetSongName(G_selected_song_index));
 126   5                          } else if (current_music_state == PLAYER_PAUSED) {
 127   5                              Music_Resume();
 128   5                              LCD_ShowString(1, 1, Music_GetSongName(G_selected_song_index));
 129   5                              LCD_ShowString(2, 1, "Playing     ");
 130   5                          } else { // PLAYER_STOPPED or other initial states
 131   5                              Music_PlaySong(G_selected_song_index);                        
 132   5                              LCD_ShowString(2, 1, "Playing    ");
 133   5                              LCD_ShowString(1, 1, Music_GetSongName(G_selected_song_index));  
 134   5                                                    
 135   5                          }
 136   4                          break;
 137   4      
 138   4                      case KEY_S14: // Next Song (mapped to S14)
 139   4                          G_selected_song_index++;
 140   4                          if (G_selected_song_index >= Music_GetTotalSongs()) {
 141   5                              G_selected_song_index = 0;
 142   5                          }
 143   4                          Music_PlaySong(G_selected_song_index);                
 144   4                          LCD_ShowString(2, 1, "Playing    ");
 145   4                          LCD_ShowString(1, 1, Music_GetSongName(G_selected_song_index));
 146   4                                  
 147   4                          break;
 148   4      
 149   4                      case KEY_S15: // Previous Song (mapped to S15)
 150   4                          if (G_selected_song_index == 0) {
 151   5                              G_selected_song_index = Music_GetTotalSongs() - 1;
 152   5                          } else {
 153   5                              G_selected_song_index--;
 154   5                          }
 155   4                          Music_PlaySong(G_selected_song_index);
 156   4                          LCD_ShowString(2, 1, "Playing   ");
 157   4                          LCD_ShowString(1, 1, Music_GetSongName(G_selected_song_index));
 158   4                          break;
 159   4      
 160   4                      case KEY_S16: // Stop (mapped to S16)
 161   4                          Music_Stop();
 162   4                          LCD_ShowString(2,1,"Stopped.     "); 
 163   4                          break;
 164   4      
 165   4                      default:
 166   4                          break;
 167   4                  }
 168   3                  processed_key_press = KEY_NONE; // Clear the event after processing
 169   3              } // End of if (processed_key_press != KEY_NONE)
 170   2      
 171   2              // --- LCD Time Update Logic ---
 172   2              // This block is now correctly placed directly inside the while(1) loop.
 173   2              if (G_update_lcd_time_flag) {
 174   3                  G_update_lcd_time_flag = 0; // Clear the flag
 175   3      
 176   3                  // Variable declarations for this block are now at the start of main()
 177   3                  // or should be at the start of this 'if' block if C51 allowed it,
C51 COMPILER V9.59.0.0   MAIN                                                              05/16/2025 21:03:58 PAGE 4   

 178   3                  // but for C51, it's safest to declare them at the start of the function.
 179   3                  // Since they are only used here, their values are assigned here.
 180   3      
 181   3                  if (Music_GetState() == PLAYER_STOPPED) {
 182   4                      minutes = 0;
 183   4                      seconds = 0;
 184   4                  } else {
 185   4                      elapsed_ms = Music_GetCurrentSongElapsedTimeMs();
 186   4                      total_seconds = elapsed_ms / 1000;
 187   4                      minutes = total_seconds / 60;
 188   4                      seconds = total_seconds % 60;
 189   4                  }
 190   3      
 191   3                  // Format the time string MM:SS
 192   3                  time_str[0] = (minutes / 10) + '0';
 193   3                  time_str[1] = (minutes % 10) + '0';
 194   3                  time_str[2] = ':';
 195   3                  time_str[3] = (seconds / 10) + '0';
 196   3                  time_str[4] = (seconds % 10) + '0';
 197   3                  time_str[5] = '\0'; // Null terminator for the string
 198   3      
 199   3                  // Assume you have LCD driver functions, e.g., LCD_ShowString(row, col, string)
 200   3                  // You need to adjust the following code according to your LCD driver.
 201   3                  // Example:
 202   3                  LCD_ShowString(1, 12, time_str); // Display "MM:SS" at row 1, col 10
 203   3                  // }
 204   3              } // End of if (G_update_lcd_time_flag)
 205   2      
 206   2              delay_ms_main(10); // Main loop delay
 207   2          } // End of while(1)
 208   1      } // End of main()


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    584    ----
   CONSTANT SIZE    =     82    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
