C51 COMPILER V9.59.0.0   MUSIC_DATA                                                        05/16/2025 21:30:06 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MUSIC_DATA
OBJECT MODULE PLACED IN .\Objects\music_data.obj
COMPILER INVOKED BY: E:\keil\C51\BIN\C51.EXE music_data.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\m
                    -usic_data.lst) TABS(2) OBJECT(.\Objects\music_data.obj)

line level    source

   1          #include "music_player.h" // For NOTE_* defines and SONG_END_MARKER
   2          #include "music_data.h"   // For consistency
   3          
   4          //-----------------------------------------------------------------------------
   5          // Frequency Table (Timer0 reload values for 16-bit mode)
   6          //-----------------------------------------------------------------------------
   7          // Calculated for F_OSC = 11.0592 MHz
   8          // Machine Cycle Freq = 11.0592 MHz / 12 = 921600 Hz
   9          // Timer Reload Value = 65536 - (MachineCycleFreq / (2 * NoteFreq))
  10          // Note Frequencies (Approximate):
  11          // C4 (M1): 261.63 Hz | D4 (M2): 293.66 Hz | E4 (M3): 329.63 Hz | F4 (M4): 349.23 Hz
  12          // G4 (M5): 392.00 Hz | A4 (M6): 440.00 Hz | B4 (M7): 493.88 Hz
  13          // L_ = Octave Lower, H_ = Octave Higher. Each step is F_new = F_old * 2^(1/12) for sharps.
  14          // For simplicity, this table provides basic natural notes. Sharps/flats would need more entries.
  15          
  16          const unsigned int code FreqTable[] = {
  17              // Pause
  18              0, // NOTE_P (Timer will not be reloaded by ISR if FreqSelect is this)
  19          
  20              // Low Octave (Approx C3-B3) - Values are 65536 - (921600 / (2 * Freq))
  21              65536 - (921600 / (2 * 130.81)), // L1 (C3) ~130.81 Hz -> 65536 - 3522 = 62014
  22              0,                               // L1_ (Placeholder for C#3)
  23              65536 - (921600 / (2 * 146.83)), // L2 (D3) ~146.83 Hz -> 65536 - 3138 = 62398
  24              0,                               // L2_ (Placeholder for D#3)
  25              65536 - (921600 / (2 * 164.81)), // L3 (E3) ~164.81 Hz -> 65536 - 2796 = 62740
  26              65536 - (921600 / (2 * 174.61)), // L4 (F3) ~174.61 Hz -> 65536 - 2639 = 62897
  27              0,                               // L4_ (Placeholder for F#3)
  28              65536 - (921600 / (2 * 196.00)), // L5 (G3) ~196.00 Hz -> 65536 - 2351 = 63185
  29              0,                               // L5_ (Placeholder for G#3)
  30              65536 - (921600 / (2 * 220.00)), // L6 (A3) ~220.00 Hz -> 65536 - 2095 = 63441
  31              0,                               // L6_ (Placeholder for A#3)
  32              65536 - (921600 / (2 * 246.94)), // L7 (B3) ~246.94 Hz -> 65536 - 1866 = 63670
  33          
  34              // Middle Octave (Approx C4-B4)
  35              65536 - (921600 / (2 * 261.63)), // M1 (C4) ~261.63 Hz -> 65536 - 1761 = 63775
  36              0,                               // M1_ (Placeholder for C#4)
  37              65536 - (921600 / (2 * 293.66)), // M2 (D4) ~293.66 Hz -> 65536 - 1569 = 63967
  38              0,                               // M2_ (Placeholder for D#4)
  39              65536 - (921600 / (2 * 329.63)), // M3 (E4) ~329.63 Hz -> 65536 - 1398 = 64138
  40              65536 - (921600 / (2 * 349.23)), // M4 (F4) ~349.23 Hz -> 65536 - 1319 = 64217
  41              0,                               // M4_ (Placeholder for F#4)
  42              65536 - (921600 / (2 * 392.00)), // M5 (G4) ~392.00 Hz -> 65536 - 1176 = 64360
  43              0,                               // M5_ (Placeholder for G#4)
  44              65536 - (921600 / (2 * 440.00)), // M6 (A4) ~440.00 Hz -> 65536 - 1047 = 64489
  45              0,                               // M6_ (Placeholder for A#4)
  46              65536 - (921600 / (2 * 493.88)), // M7 (B4) ~493.88 Hz -> 65536 - 933  = 64603
  47          
  48              // High Octave (Approx C5-B5)
  49              65536 - (921600 / (2 * 523.25)), // H1 (C5) ~523.25 Hz -> 65536 - 881  = 64655
  50              0,                               // H1_ (Placeholder for C#5)
  51              65536 - (921600 / (2 * 587.33)), // H2 (D5) ~587.33 Hz -> 65536 - 785  = 64751
  52              0,                               // H2_ (Placeholder for D#5)
  53              65536 - (921600 / (2 * 659.25)), // H3 (E5) ~659.25 Hz -> 65536 - 699  = 64837
  54              65536 - (921600 / (2 * 698.46)), // H4 (F5) ~698.46 Hz -> 65536 - 660  = 64876  -- Note: Freq for F5 i
C51 COMPILER V9.59.0.0   MUSIC_DATA                                                        05/16/2025 21:30:06 PAGE 2   

             -s 698.46, (921600/(2*698.46)) = 659.8 ~ 660
  55              0,                               // H4_ (Placeholder for F#5)
  56              65536 - (921600 / (2 * 783.99)), // H5 (G5) ~783.99 Hz -> 65536 - 588  = 64948
  57              0,                               // H5_ (Placeholder for G#5)
  58              65536 - (921600 / (2 * 880.00)), // H6 (A5) ~880.00 Hz -> 65536 - 524  = 65012 // (921600/(2*880)) = 5
             -23.6 ~ 524
  59              0,                               // H6_ (Placeholder for A#5)
  60              65536 - (921600 / (2 * 987.77))  // H7 (B5) ~987.77 Hz -> 65536 - 466  = 65070
  61          };
  62          
  63          //-----------------------------------------------------------------------------
  64          // Song Data: "Farewell"
  65          //-----------------------------------------------------------------------------
  66          const unsigned char code Song_Farewell[] = {
  67              // Prelude
  68              NOTE_P,12,   NOTE_M5,4,  NOTE_M3,2,  NOTE_M5,2,  NOTE_H1,6,  NOTE_M7,2,
  69              NOTE_M6,4,  NOTE_H1,4,  NOTE_M5,8,
  70              NOTE_M5,4,  NOTE_M2,2,  NOTE_M3,2,  NOTE_M4,6,  NOTE_L7,2, // NOTE_L7 might be too low with this table
             -, adjust if needed
  71              NOTE_M1,16,
  72          
  73              // Verse 1
  74              NOTE_M5,4,  NOTE_M3,2,  NOTE_M5,2,  NOTE_H1,8,
  75              NOTE_M6,4,  NOTE_H1,4,  NOTE_M5,8,
  76              NOTE_M5,4,  NOTE_M1,2,  NOTE_M2,2,  NOTE_M3,4,  NOTE_M2,2,  NOTE_M1,2,
  77              NOTE_M2,8,  NOTE_P,8,
  78              NOTE_M5,4,  NOTE_M3,2,  NOTE_M5,2,  NOTE_H1,6,  NOTE_M7,2,
  79              NOTE_M6,4,  NOTE_H1,4,  NOTE_M5,8,
  80              NOTE_M5,4,  NOTE_M2,2,  NOTE_M3,2,  NOTE_M4,6,  NOTE_L7,2,
  81              NOTE_M1,8,  NOTE_P,8,
  82              NOTE_M6,4,  NOTE_H1,4,  NOTE_H1,8,
  83              NOTE_M7,4,  NOTE_M6,2,  NOTE_M7,2,  NOTE_H1,8,
  84              NOTE_M6,2,  NOTE_M7,2,  NOTE_H1,2,  NOTE_M6,2,  NOTE_M6,2,  NOTE_M5,2,  NOTE_M3,2,  NOTE_M1,2,
  85              NOTE_M2,8,  NOTE_P,8,
  86              NOTE_M5,4,  NOTE_M3,2,  NOTE_M5,2,  NOTE_H1,6,  NOTE_M7,2,
  87              NOTE_M6,4,  NOTE_H1,4,  NOTE_M5,8,
  88              NOTE_M5,4,  NOTE_M2,2,  NOTE_M3,2,  NOTE_M4,6,  NOTE_L7,2,
  89              NOTE_M1,8,  NOTE_P,8,
  90              SONG_END_MARKER
  91          };
  92          
  93          //-----------------------------------------------------------------------------
  94          // Song Data: "Sky" (City of Sky)
  95          //-----------------------------------------------------------------------------
  96          const unsigned char code Song_Sky[] = {
  97              NOTE_P, 4,  NOTE_P, 4,  NOTE_P, 4,  NOTE_M6, 2,  NOTE_M7, 2,
  98              NOTE_H1, 4+2, NOTE_M7, 2, NOTE_H1, 4,  NOTE_H3, 4,
  99              NOTE_M7, 4+4+4, NOTE_M3, 2,  NOTE_M3, 2,
 100              NOTE_M6, 4+2, NOTE_M5, 2, NOTE_M6, 4,  NOTE_H1, 4,
 101              NOTE_M5, 4+4+4, NOTE_M3, 4,
 102              NOTE_M4, 4+2, NOTE_M3, 2, NOTE_M4, 4,  NOTE_H1, 4, // NOTE_M4_ used in original, replace with NOTE_M4 
             -or define sharp
 103              NOTE_M3, 4+4, NOTE_P, 2,  NOTE_H1, 2,  NOTE_H1, 2,  NOTE_H1, 2,
 104              NOTE_M7, 4+2, NOTE_M4, 2, NOTE_M4, 4, NOTE_M7, 4, // Replaced NOTE_M4_
 105              NOTE_M7, 8,   NOTE_P, 4,  NOTE_M6, 2,  NOTE_M7, 2,
 106              NOTE_H1, 4+2, NOTE_M7, 2, NOTE_H1, 4,  NOTE_H3, 4,
 107              NOTE_M7, 4+4+4, NOTE_M3, 2,  NOTE_M3, 2,
 108              NOTE_M6, 4+2, NOTE_M5, 2, NOTE_M6, 4,  NOTE_H1, 4,
 109              NOTE_M5, 4+4+4, NOTE_M2, 2,  NOTE_M3, 2,
 110              NOTE_M4, 4,   NOTE_H1, 2,  NOTE_M7, 2+2, NOTE_H1, 2+4,
 111              NOTE_H2, 2,   NOTE_H2, 2,  NOTE_H3, 2,  NOTE_H1, 2+4+4,
 112              NOTE_H1, 2,   NOTE_M7, 2,  NOTE_M6, 2,  NOTE_M6, 2,  NOTE_M7, 4,  NOTE_M5, 4, // Replaced NOTE_M5_
C51 COMPILER V9.59.0.0   MUSIC_DATA                                                        05/16/2025 21:30:06 PAGE 3   

 113              NOTE_M6, 4+4+4, NOTE_H1, 2,  NOTE_H2, 2,
 114              NOTE_H3, 4+2, NOTE_H2, 2, NOTE_H3, 4,  NOTE_H5, 4,
 115              NOTE_H2, 4+4+4, NOTE_M5, 2,  NOTE_M5, 2,
 116              NOTE_H1, 4+2, NOTE_M7, 2, NOTE_H1, 4,  NOTE_H3, 4,
 117              NOTE_H3, 4+4+4+4,
 118              NOTE_M6, 2,   NOTE_M7, 2,  NOTE_H1, 4,  NOTE_M7, 4,  NOTE_H2, 2,  NOTE_H2, 2,
 119              NOTE_H1, 4+2, NOTE_M5, 2+4+4,
 120              NOTE_H4, 4,   NOTE_H3, 4,  NOTE_H3, 4,  NOTE_H1, 4,
 121              NOTE_H3, 4+4+4, NOTE_H3, 4,
 122              NOTE_H6, 4+4, NOTE_H5, 4,  NOTE_H5, 4,
 123              NOTE_H3, 2,   NOTE_H2, 2,  NOTE_H1, 4+4, NOTE_P, 2,  NOTE_H1, 2,
 124              NOTE_H2, 4,   NOTE_H1, 2,  NOTE_H2, 2,  NOTE_H2, 4,  NOTE_H5, 4,
 125              NOTE_H3, 4+4+4, NOTE_H3, 4,
 126              NOTE_H6, 4+4, NOTE_H5, 4+4,
 127              NOTE_H3, 2,   NOTE_H2, 2,  NOTE_H1, 4+4, NOTE_P, 2,  NOTE_H1, 2,
 128              NOTE_H2, 4,   NOTE_H1, 2,  NOTE_H2, 2+4, NOTE_M7, 4,
 129              NOTE_M6, 4+4+4, NOTE_P, 4,
 130              SONG_END_MARKER
 131          };
 132          
 133          //-----------------------------------------------------------------------------
 134          // Song Data: "Ode to Joy"
 135          //-----------------------------------------------------------------------------
 136          const unsigned char code Song_OdeToJoy[] = {
 137              NOTE_P, 12,
 138              // Phrase 1 (E E F G | G F E D | C C D E | E. D D_half)
 139              NOTE_M3, 4, NOTE_M3, 4, NOTE_M4, 4, NOTE_M5, 4,  // Mi Mi Fa So
 140              NOTE_M5, 4, NOTE_M4, 4, NOTE_M3, 4, NOTE_M2, 4,  // So Fa Mi Re
 141              NOTE_M1, 4, NOTE_M1, 4, NOTE_M2, 4, NOTE_M3, 4,  // Do Do Re Mi
 142              NOTE_M3, 6, NOTE_M2, 2, NOTE_M2, 8,              // Mi. Re Re-
 143          
 144              // Phrase 2 (E E F G | G F E D | C C D E | D. C C_half)
 145              NOTE_M3, 4, NOTE_M3, 4, NOTE_M4, 4, NOTE_M5, 4,  // Mi Mi Fa So
 146              NOTE_M5, 4, NOTE_M4, 4, NOTE_M3, 4, NOTE_M2, 4,  // So Fa Mi Re
 147              NOTE_M1, 4, NOTE_M1, 4, NOTE_M2, 4, NOTE_M3, 4,  // Do Do Re Mi
 148              NOTE_M2, 6, NOTE_M1, 2, NOTE_M1, 8,              // Re. Do Do-
 149          
 150              // Phrase 3 (D D E C | D E F G E C | D E F G E D | C D G_low_half)
 151              NOTE_M2, 4, NOTE_M2, 4, NOTE_M3, 4, NOTE_M1, 4,  // Re Re Mi Do
 152              NOTE_M2, 4, NOTE_M3, 2, NOTE_M4, 2, NOTE_M3, 4,  NOTE_M1, 4, // Re Mi Fa Mi Do
 153              NOTE_M2, 4, NOTE_M3, 4, NOTE_M3, 4, NOTE_M2, 4, // Re Mi Mi Re 
 154              NOTE_M1, 4, NOTE_M2, 4, NOTE_L5, 8,              // Do Re Sol(low)-
 155          
 156              // Phrase 4 (Repeat of Phrase 2 logic)
 157              NOTE_M3, 4, NOTE_M3, 4, NOTE_M4, 4, NOTE_M5, 4,  // Mi Mi Fa So
 158              NOTE_M5, 4, NOTE_M4, 4, NOTE_M3, 4, NOTE_M2, 4,  // So Fa Mi Re
 159              NOTE_M1, 4, NOTE_M1, 4, NOTE_M2, 4, NOTE_M3, 4,  // Do Do Re Mi
 160              NOTE_M2, 6, NOTE_M1, 2, NOTE_M1, 8,              // Re. Do Do-
 161              
 162              SONG_END_MARKER
 163          };
 164          const unsigned char code * const code Songs[] = {
 165              Song_Farewell,
 166              Song_Sky,
 167              Song_OdeToJoy   
 168          };
 169          
 170          const char code * const code Song_Names[] = {
 171              "Farewell",
 172              "Sky City",
 173              "OdeToJoy"
 174          };
C51 COMPILER V9.59.0.0   MUSIC_DATA                                                        05/16/2025 21:30:06 PAGE 4   

 175          
 176          const unsigned char NUM_SONGS = sizeof(Songs) / sizeof(Songs[0]);


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    634    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
